// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ChromatogramGroupData.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace pwiz.Skyline.Model.Results.ProtoBuf {

  /// <summary>Holder for reflection information generated from ChromatogramGroupData.proto</summary>
  public static partial class ChromatogramGroupDataReflection {

    #region Descriptor
    /// <summary>File descriptor for ChromatogramGroupData.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ChromatogramGroupDataReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChtDaHJvbWF0b2dyYW1Hcm91cERhdGEucHJvdG8ikAQKFUNocm9tYXRvZ3Jh",
            "bUdyb3VwRGF0YRIyCgl0aW1lTGlzdHMYASADKAsyHy5DaHJvbWF0b2dyYW1H",
            "cm91cERhdGEuVGltZUxpc3QSNgoLc2NhbklkTGlzdHMYAiADKAsyIS5DaHJv",
            "bWF0b2dyYW1Hcm91cERhdGEuU2NhbklkTGlzdBI6Cg1jaHJvbWF0b2dyYW1z",
            "GAMgAygLMiMuQ2hyb21hdG9ncmFtR3JvdXBEYXRhLkNocm9tYXRvZ3JhbRId",
            "ChVpbnRlcnBvbGF0ZWRTdGFydFRpbWUYBCABKAESGwoTaW50ZXJwb2xhdGVk",
            "RW5kVGltZRgFIAEoARIdChVpbnRlcnBvbGF0ZWROdW1Qb2ludHMYBiABKAUS",
            "GQoRaW50ZXJwb2xhdGVkRGVsdGEYByABKAESEwoLaW5mZXJaZXJvZXMYCSAB",
            "KAgaGQoIVGltZUxpc3QSDQoFdGltZXMYASADKAIaHQoKU2NhbklkTGlzdBIP",
            "CgdzY2FuSWRzGAIgAygFGokBCgxDaHJvbWF0b2dyYW0SFQoNdGltZUxpc3RJ",
            "bmRleBgBIAEoBRITCgtpbnRlbnNpdGllcxgCIAMoAhIcChRtYXNzRXJyb3Jz",
            "RGVwcmVjYXRlZBgDIAMoAhIWCg5tYXNzRXJyb3JzMTAwWBgFIAMoERIXCg9z",
            "Y2FuSWRMaXN0SW5kZXgYBCABKAVCJqoCI3B3aXouU2t5bGluZS5Nb2RlbC5S",
            "ZXN1bHRzLlByb3RvQnVmYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::pwiz.Skyline.Model.Results.ProtoBuf.ChromatogramGroupData), global::pwiz.Skyline.Model.Results.ProtoBuf.ChromatogramGroupData.Parser, new[]{ "TimeLists", "ScanIdLists", "Chromatograms", "InterpolatedStartTime", "InterpolatedEndTime", "InterpolatedNumPoints", "InterpolatedDelta", "InferZeroes" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::pwiz.Skyline.Model.Results.ProtoBuf.ChromatogramGroupData.Types.TimeList), global::pwiz.Skyline.Model.Results.ProtoBuf.ChromatogramGroupData.Types.TimeList.Parser, new[]{ "Times" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::pwiz.Skyline.Model.Results.ProtoBuf.ChromatogramGroupData.Types.ScanIdList), global::pwiz.Skyline.Model.Results.ProtoBuf.ChromatogramGroupData.Types.ScanIdList.Parser, new[]{ "ScanIds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::pwiz.Skyline.Model.Results.ProtoBuf.ChromatogramGroupData.Types.Chromatogram), global::pwiz.Skyline.Model.Results.ProtoBuf.ChromatogramGroupData.Types.Chromatogram.Parser, new[]{ "TimeListIndex", "Intensities", "MassErrorsDeprecated", "MassErrors100X", "ScanIdListIndex" }, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ChromatogramGroupData : pb::IMessage<ChromatogramGroupData> {
    private static readonly pb::MessageParser<ChromatogramGroupData> _parser = new pb::MessageParser<ChromatogramGroupData>(() => new ChromatogramGroupData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChromatogramGroupData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::pwiz.Skyline.Model.Results.ProtoBuf.ChromatogramGroupDataReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChromatogramGroupData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChromatogramGroupData(ChromatogramGroupData other) : this() {
      timeLists_ = other.timeLists_.Clone();
      scanIdLists_ = other.scanIdLists_.Clone();
      chromatograms_ = other.chromatograms_.Clone();
      interpolatedStartTime_ = other.interpolatedStartTime_;
      interpolatedEndTime_ = other.interpolatedEndTime_;
      interpolatedNumPoints_ = other.interpolatedNumPoints_;
      interpolatedDelta_ = other.interpolatedDelta_;
      inferZeroes_ = other.inferZeroes_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChromatogramGroupData Clone() {
      return new ChromatogramGroupData(this);
    }

    /// <summary>Field number for the "timeLists" field.</summary>
    public const int TimeListsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::pwiz.Skyline.Model.Results.ProtoBuf.ChromatogramGroupData.Types.TimeList> _repeated_timeLists_codec
        = pb::FieldCodec.ForMessage(10, global::pwiz.Skyline.Model.Results.ProtoBuf.ChromatogramGroupData.Types.TimeList.Parser);
    private readonly pbc::RepeatedField<global::pwiz.Skyline.Model.Results.ProtoBuf.ChromatogramGroupData.Types.TimeList> timeLists_ = new pbc::RepeatedField<global::pwiz.Skyline.Model.Results.ProtoBuf.ChromatogramGroupData.Types.TimeList>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::pwiz.Skyline.Model.Results.ProtoBuf.ChromatogramGroupData.Types.TimeList> TimeLists {
      get { return timeLists_; }
    }

    /// <summary>Field number for the "scanIdLists" field.</summary>
    public const int ScanIdListsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::pwiz.Skyline.Model.Results.ProtoBuf.ChromatogramGroupData.Types.ScanIdList> _repeated_scanIdLists_codec
        = pb::FieldCodec.ForMessage(18, global::pwiz.Skyline.Model.Results.ProtoBuf.ChromatogramGroupData.Types.ScanIdList.Parser);
    private readonly pbc::RepeatedField<global::pwiz.Skyline.Model.Results.ProtoBuf.ChromatogramGroupData.Types.ScanIdList> scanIdLists_ = new pbc::RepeatedField<global::pwiz.Skyline.Model.Results.ProtoBuf.ChromatogramGroupData.Types.ScanIdList>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::pwiz.Skyline.Model.Results.ProtoBuf.ChromatogramGroupData.Types.ScanIdList> ScanIdLists {
      get { return scanIdLists_; }
    }

    /// <summary>Field number for the "chromatograms" field.</summary>
    public const int ChromatogramsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::pwiz.Skyline.Model.Results.ProtoBuf.ChromatogramGroupData.Types.Chromatogram> _repeated_chromatograms_codec
        = pb::FieldCodec.ForMessage(26, global::pwiz.Skyline.Model.Results.ProtoBuf.ChromatogramGroupData.Types.Chromatogram.Parser);
    private readonly pbc::RepeatedField<global::pwiz.Skyline.Model.Results.ProtoBuf.ChromatogramGroupData.Types.Chromatogram> chromatograms_ = new pbc::RepeatedField<global::pwiz.Skyline.Model.Results.ProtoBuf.ChromatogramGroupData.Types.Chromatogram>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::pwiz.Skyline.Model.Results.ProtoBuf.ChromatogramGroupData.Types.Chromatogram> Chromatograms {
      get { return chromatograms_; }
    }

    /// <summary>Field number for the "interpolatedStartTime" field.</summary>
    public const int InterpolatedStartTimeFieldNumber = 4;
    private double interpolatedStartTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double InterpolatedStartTime {
      get { return interpolatedStartTime_; }
      set {
        interpolatedStartTime_ = value;
      }
    }

    /// <summary>Field number for the "interpolatedEndTime" field.</summary>
    public const int InterpolatedEndTimeFieldNumber = 5;
    private double interpolatedEndTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double InterpolatedEndTime {
      get { return interpolatedEndTime_; }
      set {
        interpolatedEndTime_ = value;
      }
    }

    /// <summary>Field number for the "interpolatedNumPoints" field.</summary>
    public const int InterpolatedNumPointsFieldNumber = 6;
    private int interpolatedNumPoints_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InterpolatedNumPoints {
      get { return interpolatedNumPoints_; }
      set {
        interpolatedNumPoints_ = value;
      }
    }

    /// <summary>Field number for the "interpolatedDelta" field.</summary>
    public const int InterpolatedDeltaFieldNumber = 7;
    private double interpolatedDelta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double InterpolatedDelta {
      get { return interpolatedDelta_; }
      set {
        interpolatedDelta_ = value;
      }
    }

    /// <summary>Field number for the "inferZeroes" field.</summary>
    public const int InferZeroesFieldNumber = 9;
    private bool inferZeroes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool InferZeroes {
      get { return inferZeroes_; }
      set {
        inferZeroes_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChromatogramGroupData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChromatogramGroupData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!timeLists_.Equals(other.timeLists_)) return false;
      if(!scanIdLists_.Equals(other.scanIdLists_)) return false;
      if(!chromatograms_.Equals(other.chromatograms_)) return false;
      if (InterpolatedStartTime != other.InterpolatedStartTime) return false;
      if (InterpolatedEndTime != other.InterpolatedEndTime) return false;
      if (InterpolatedNumPoints != other.InterpolatedNumPoints) return false;
      if (InterpolatedDelta != other.InterpolatedDelta) return false;
      if (InferZeroes != other.InferZeroes) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= timeLists_.GetHashCode();
      hash ^= scanIdLists_.GetHashCode();
      hash ^= chromatograms_.GetHashCode();
      if (InterpolatedStartTime != 0D) hash ^= InterpolatedStartTime.GetHashCode();
      if (InterpolatedEndTime != 0D) hash ^= InterpolatedEndTime.GetHashCode();
      if (InterpolatedNumPoints != 0) hash ^= InterpolatedNumPoints.GetHashCode();
      if (InterpolatedDelta != 0D) hash ^= InterpolatedDelta.GetHashCode();
      if (InferZeroes != false) hash ^= InferZeroes.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      timeLists_.WriteTo(output, _repeated_timeLists_codec);
      scanIdLists_.WriteTo(output, _repeated_scanIdLists_codec);
      chromatograms_.WriteTo(output, _repeated_chromatograms_codec);
      if (InterpolatedStartTime != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(InterpolatedStartTime);
      }
      if (InterpolatedEndTime != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(InterpolatedEndTime);
      }
      if (InterpolatedNumPoints != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(InterpolatedNumPoints);
      }
      if (InterpolatedDelta != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(InterpolatedDelta);
      }
      if (InferZeroes != false) {
        output.WriteRawTag(72);
        output.WriteBool(InferZeroes);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += timeLists_.CalculateSize(_repeated_timeLists_codec);
      size += scanIdLists_.CalculateSize(_repeated_scanIdLists_codec);
      size += chromatograms_.CalculateSize(_repeated_chromatograms_codec);
      if (InterpolatedStartTime != 0D) {
        size += 1 + 8;
      }
      if (InterpolatedEndTime != 0D) {
        size += 1 + 8;
      }
      if (InterpolatedNumPoints != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InterpolatedNumPoints);
      }
      if (InterpolatedDelta != 0D) {
        size += 1 + 8;
      }
      if (InferZeroes != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChromatogramGroupData other) {
      if (other == null) {
        return;
      }
      timeLists_.Add(other.timeLists_);
      scanIdLists_.Add(other.scanIdLists_);
      chromatograms_.Add(other.chromatograms_);
      if (other.InterpolatedStartTime != 0D) {
        InterpolatedStartTime = other.InterpolatedStartTime;
      }
      if (other.InterpolatedEndTime != 0D) {
        InterpolatedEndTime = other.InterpolatedEndTime;
      }
      if (other.InterpolatedNumPoints != 0) {
        InterpolatedNumPoints = other.InterpolatedNumPoints;
      }
      if (other.InterpolatedDelta != 0D) {
        InterpolatedDelta = other.InterpolatedDelta;
      }
      if (other.InferZeroes != false) {
        InferZeroes = other.InferZeroes;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            timeLists_.AddEntriesFrom(input, _repeated_timeLists_codec);
            break;
          }
          case 18: {
            scanIdLists_.AddEntriesFrom(input, _repeated_scanIdLists_codec);
            break;
          }
          case 26: {
            chromatograms_.AddEntriesFrom(input, _repeated_chromatograms_codec);
            break;
          }
          case 33: {
            InterpolatedStartTime = input.ReadDouble();
            break;
          }
          case 41: {
            InterpolatedEndTime = input.ReadDouble();
            break;
          }
          case 48: {
            InterpolatedNumPoints = input.ReadInt32();
            break;
          }
          case 57: {
            InterpolatedDelta = input.ReadDouble();
            break;
          }
          case 72: {
            InferZeroes = input.ReadBool();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ChromatogramGroupData message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class TimeList : pb::IMessage<TimeList> {
        private static readonly pb::MessageParser<TimeList> _parser = new pb::MessageParser<TimeList>(() => new TimeList());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<TimeList> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::pwiz.Skyline.Model.Results.ProtoBuf.ChromatogramGroupData.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TimeList() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TimeList(TimeList other) : this() {
          times_ = other.times_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TimeList Clone() {
          return new TimeList(this);
        }

        /// <summary>Field number for the "times" field.</summary>
        public const int TimesFieldNumber = 1;
        private static readonly pb::FieldCodec<float> _repeated_times_codec
            = pb::FieldCodec.ForFloat(10);
        private readonly pbc::RepeatedField<float> times_ = new pbc::RepeatedField<float>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<float> Times {
          get { return times_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as TimeList);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(TimeList other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!times_.Equals(other.times_)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= times_.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          times_.WriteTo(output, _repeated_times_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += times_.CalculateSize(_repeated_times_codec);
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(TimeList other) {
          if (other == null) {
            return;
          }
          times_.Add(other.times_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10:
              case 13: {
                times_.AddEntriesFrom(input, _repeated_times_codec);
                break;
              }
            }
          }
        }

      }

      public sealed partial class ScanIdList : pb::IMessage<ScanIdList> {
        private static readonly pb::MessageParser<ScanIdList> _parser = new pb::MessageParser<ScanIdList>(() => new ScanIdList());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ScanIdList> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::pwiz.Skyline.Model.Results.ProtoBuf.ChromatogramGroupData.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ScanIdList() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ScanIdList(ScanIdList other) : this() {
          scanIds_ = other.scanIds_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ScanIdList Clone() {
          return new ScanIdList(this);
        }

        /// <summary>Field number for the "scanIds" field.</summary>
        public const int ScanIdsFieldNumber = 2;
        private static readonly pb::FieldCodec<int> _repeated_scanIds_codec
            = pb::FieldCodec.ForInt32(18);
        private readonly pbc::RepeatedField<int> scanIds_ = new pbc::RepeatedField<int>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<int> ScanIds {
          get { return scanIds_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ScanIdList);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ScanIdList other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!scanIds_.Equals(other.scanIds_)) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= scanIds_.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          scanIds_.WriteTo(output, _repeated_scanIds_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += scanIds_.CalculateSize(_repeated_scanIds_codec);
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ScanIdList other) {
          if (other == null) {
            return;
          }
          scanIds_.Add(other.scanIds_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 18:
              case 16: {
                scanIds_.AddEntriesFrom(input, _repeated_scanIds_codec);
                break;
              }
            }
          }
        }

      }

      public sealed partial class Chromatogram : pb::IMessage<Chromatogram> {
        private static readonly pb::MessageParser<Chromatogram> _parser = new pb::MessageParser<Chromatogram>(() => new Chromatogram());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Chromatogram> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::pwiz.Skyline.Model.Results.ProtoBuf.ChromatogramGroupData.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Chromatogram() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Chromatogram(Chromatogram other) : this() {
          timeListIndex_ = other.timeListIndex_;
          intensities_ = other.intensities_.Clone();
          massErrorsDeprecated_ = other.massErrorsDeprecated_.Clone();
          massErrors100X_ = other.massErrors100X_.Clone();
          scanIdListIndex_ = other.scanIdListIndex_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Chromatogram Clone() {
          return new Chromatogram(this);
        }

        /// <summary>Field number for the "timeListIndex" field.</summary>
        public const int TimeListIndexFieldNumber = 1;
        private int timeListIndex_;
        /// <summary>
        /// One-based index into "timeLists" indicating which set of times to use.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int TimeListIndex {
          get { return timeListIndex_; }
          set {
            timeListIndex_ = value;
          }
        }

        /// <summary>Field number for the "intensities" field.</summary>
        public const int IntensitiesFieldNumber = 2;
        private static readonly pb::FieldCodec<float> _repeated_intensities_codec
            = pb::FieldCodec.ForFloat(18);
        private readonly pbc::RepeatedField<float> intensities_ = new pbc::RepeatedField<float>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<float> Intensities {
          get { return intensities_; }
        }

        /// <summary>Field number for the "massErrorsDeprecated" field.</summary>
        public const int MassErrorsDeprecatedFieldNumber = 3;
        private static readonly pb::FieldCodec<float> _repeated_massErrorsDeprecated_codec
            = pb::FieldCodec.ForFloat(26);
        private readonly pbc::RepeatedField<float> massErrorsDeprecated_ = new pbc::RepeatedField<float>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<float> MassErrorsDeprecated {
          get { return massErrorsDeprecated_; }
        }

        /// <summary>Field number for the "massErrors100X" field.</summary>
        public const int MassErrors100XFieldNumber = 5;
        private static readonly pb::FieldCodec<int> _repeated_massErrors100X_codec
            = pb::FieldCodec.ForSInt32(42);
        private readonly pbc::RepeatedField<int> massErrors100X_ = new pbc::RepeatedField<int>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<int> MassErrors100X {
          get { return massErrors100X_; }
        }

        /// <summary>Field number for the "scanIdListIndex" field.</summary>
        public const int ScanIdListIndexFieldNumber = 4;
        private int scanIdListIndex_;
        /// <summary>
        /// One-based index into "scanIdLists" or zero if no scanIds
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ScanIdListIndex {
          get { return scanIdListIndex_; }
          set {
            scanIdListIndex_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Chromatogram);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Chromatogram other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (TimeListIndex != other.TimeListIndex) return false;
          if(!intensities_.Equals(other.intensities_)) return false;
          if(!massErrorsDeprecated_.Equals(other.massErrorsDeprecated_)) return false;
          if(!massErrors100X_.Equals(other.massErrors100X_)) return false;
          if (ScanIdListIndex != other.ScanIdListIndex) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (TimeListIndex != 0) hash ^= TimeListIndex.GetHashCode();
          hash ^= intensities_.GetHashCode();
          hash ^= massErrorsDeprecated_.GetHashCode();
          hash ^= massErrors100X_.GetHashCode();
          if (ScanIdListIndex != 0) hash ^= ScanIdListIndex.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (TimeListIndex != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(TimeListIndex);
          }
          intensities_.WriteTo(output, _repeated_intensities_codec);
          massErrorsDeprecated_.WriteTo(output, _repeated_massErrorsDeprecated_codec);
          if (ScanIdListIndex != 0) {
            output.WriteRawTag(32);
            output.WriteInt32(ScanIdListIndex);
          }
          massErrors100X_.WriteTo(output, _repeated_massErrors100X_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (TimeListIndex != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(TimeListIndex);
          }
          size += intensities_.CalculateSize(_repeated_intensities_codec);
          size += massErrorsDeprecated_.CalculateSize(_repeated_massErrorsDeprecated_codec);
          size += massErrors100X_.CalculateSize(_repeated_massErrors100X_codec);
          if (ScanIdListIndex != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(ScanIdListIndex);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Chromatogram other) {
          if (other == null) {
            return;
          }
          if (other.TimeListIndex != 0) {
            TimeListIndex = other.TimeListIndex;
          }
          intensities_.Add(other.intensities_);
          massErrorsDeprecated_.Add(other.massErrorsDeprecated_);
          massErrors100X_.Add(other.massErrors100X_);
          if (other.ScanIdListIndex != 0) {
            ScanIdListIndex = other.ScanIdListIndex;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                TimeListIndex = input.ReadInt32();
                break;
              }
              case 18:
              case 21: {
                intensities_.AddEntriesFrom(input, _repeated_intensities_codec);
                break;
              }
              case 26:
              case 29: {
                massErrorsDeprecated_.AddEntriesFrom(input, _repeated_massErrorsDeprecated_codec);
                break;
              }
              case 32: {
                ScanIdListIndex = input.ReadInt32();
                break;
              }
              case 42:
              case 40: {
                massErrors100X_.AddEntriesFrom(input, _repeated_massErrors100X_codec);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
